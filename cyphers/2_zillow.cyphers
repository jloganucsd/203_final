//
// Open file for property and city nodes
//
LOAD CSV WITH HEADERS
FROM 'FILE:///zillow_properties.csv' AS row
MERGE (p:Property {id: toInteger(row.id)})
MERGE (c:City {name: row.city})
MERGE (p)-[:Located_In]->(c)
SET
    p.price = toInteger(row.price),
    p.url = row.url,
    p.coordinate = point({longitude: toFloat(row.longitude), latitude: toFloat(row.latitude)}),
    p.street = row.street,
    p.state = row.state,
    p.zip_code = toInteger(row.zipcode),
    p.bed = toInteger(row.bed),
    p.bath = toFloat(row.bath),
    p.year_built = toInteger(row.year_built),
    p.size = toInteger(row.size),
    p.description = row.description
RETURN
    count(p) AS Zillow_Property,
    count(distinct c) AS Zillow_City;

//
// Open file for neighborhood nodes
//
LOAD CSV WITH HEADERS
FROM 'FILE:///zillow_properties.csv' AS row
MATCH (p:Property), (c:City)
WHERE p.id = toInteger(row.id) AND c.name = row.city
//
// Neighborhood nodes
//
// The date is given to us as a string, ex:
// "['Del Cerro', 'Kensington']"
// The goal below is to convert string to list as well as trim quotes and
// whitespace from the inner neighborhood names.
//
UNWIND split(substring(row.neighborhood, 1, size(row.neighborhood)-2), ',') AS neighborhood
MERGE (n:Neighborhood {name: replace(trim(neighborhood), "'", "")})
MERGE (p)-[:Located_In]->(n)
MERGE (n)-[:Located_In]->(c)
RETURN
    count(distinct n) AS Zillow_Neighborhood,
    count(n) AS Zillow_Neighborhood_Relationship;
