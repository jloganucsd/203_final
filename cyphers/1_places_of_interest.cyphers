// ----------------------------------------------
// Insert restaurant nodes with Yelp data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///yelp_restaurant.csv' AS row
MERGE
    (r:Restaurant {yelp_id: row.id})
SET
    r.name = row.name,
    r.yelp_url = row.url,
    r.yelp_review_count = toInteger(row.review_count),
    r.yelp_rating = toFloat(row.rating),
    r.coordinate = point({longitude: toFloat(row.coordinates_longitude), latitude: toFloat(row.coordinates_latitude)}),
    r.price_range = row.price,
    r.address = coalesce(row.location_address1, '') + coalesce(' ' + row.location_address2, '') + coalesce(' ' + row.location_address3, ''),
    r.county = row.county,
    r.state = row.state,
    r.zip_code = toInteger(row.postal_code),
    r.country = row.country,
    r.phone = toInteger(row.phone)
WITH row, r
WHERE
    row.city <> ''
MERGE
    (c:City {name: row.city})
MERGE
    (r)-[e1:Located_In]->(c)
WITH row, r, c, e1
WHERE
    row.neighborhood <> ''
MERGE
    (n:Neighborhood {name: row.neighborhood})
MERGE
    (n)-[e2:Located_In]->(c)
MERGE
    (r)-[e3:Located_In]->(n)
RETURN
    count(r) as Restaurant_Yelp,
    count(distinct n) as Neighborhood_Yelp,
    count(distinct c) as City_Yelp,
    count(e1) as In_relationship_1,
    count(e2) as In_relationship_2,
    count(e3) as In_relationship_3;

// ----------------------------------------------
// Update restaurant nodes with matching data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///restaurant_match.csv' AS row
MERGE
    (r:Restaurant {yelp_id: row.ltable_id})
SET
    r.google_id = row.rtable_place_id
RETURN
    count(r) as Restaurant_Match;

// ----------------------------------------------
// Update restaurant nodes with Google data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///google_restaurant.csv' AS row
MERGE
    (r:Restaurant {google_id: row.place_id})
ON CREATE SET
    r.name = row.name,
    r.google_url = row.url,
    r.google_review_count = toInteger(row.user_ratings_total),
    r.google_rating = toFloat(row.rating),
    r.coordinate = point({longitude: toFloat(row.geometry_location_lng), latitude: toFloat(row.geometry_location_lat)}),
    r.price_range = toFloat(row.price_level),
    r.address = row.formatted_address,
    r.county = row.county,
    r.state = row.state,
    r.zip_code = toInteger(row.postal_code),
    r.country = row.country,
    r.phone = toInteger(replace(replace(replace(replace(row.formatted_phone_number, '(', ''), ')', ''), '-', ''), ' ', ''))
ON MATCH SET
    r.google_url = row.url,
    r.google_review_count = toInteger(row.user_ratings_total),
    r.google_rating = toFloat(row.rating)
WITH row, r
WHERE
    row.city <> ''
MERGE
    (c:City {name: row.city})
MERGE
    (r)-[e1:Located_In]->(c)
WITH row, r, c, e1
WHERE
    row.neighborhood <> ''
MERGE
    (n:Neighborhood {name: row.neighborhood})
MERGE
    (n)-[e2:Located_In]->(c)
MERGE
    (r)-[e3:Located_In]->(n)
RETURN
    count(r) as Restaurant_Yelp,
    count(distinct n) as Neighborhood_Yelp,
    count(distinct c) as City_Yelp,
    count(e1) as In_relationship_1,
    count(e2) as In_relationship_2,
    count(e3) as In_relationship_3;

// ----------------------------------------------
// Insert attraction nodes with Yelp data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///yelp_attraction.csv' AS row
MERGE
    (r:Attraction {yelp_id: row.id})
SET
    r.name = row.name,
    r.yelp_url = row.url,
    r.yelp_review_count = toInteger(row.review_count),
    r.yelp_rating = toFloat(row.rating),
    r.coordinate = point({longitude: toFloat(row.coordinates_longitude), latitude: toFloat(row.coordinates_latitude)}),
    r.price_range = row.price,
    r.address = coalesce(row.location_address1, '') + coalesce(' ' + row.location_address2, '') + coalesce(' ' + row.location_address3, ''),
    r.county = row.county,
    r.state = row.location_state,
    r.zip_code = toInteger(row.location_zip_code),
    r.country = row.location_country,
    r.phone = toInteger(row.phone)
WITH row, r
WHERE
    row.location_city <> ''
MERGE
    (c:City {name: row.location_city})
MERGE
    (r)-[e1:Located_In]->(c)
RETURN
    count(r) as Attraction_Yelp,
    count(distinct c) as City_Yelp,
    count(e1) as In_relationship_1;

// ----------------------------------------------
// Insert hotel nodes with Yelp data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///yelp_hotel.csv' AS row
MERGE
    (r:Hotel {yelp_id: row.id})
SET
    r.name = row.name,
    r.yelp_url = row.url,
    r.yelp_review_count = toInteger(row.review_count),
    r.yelp_rating = toFloat(row.rating),
    r.coordinate = point({longitude: toFloat(row.coordinates_longitude), latitude: toFloat(row.coordinates_latitude)}),
    r.price_range = row.price,
    r.address = coalesce(row.location_address1, '') + coalesce(' ' + row.location_address2, '') + coalesce(' ' + row.location_address3, ''),
    r.county = row.county,
    r.state = row.location_state,
    r.zip_code = toInteger(row.location_zip_code),
    r.country = row.location_country,
    r.phone = toInteger(row.phone)
WITH row, r
WHERE
    row.location_city <> ''
MERGE
    (c:City {name: row.location_city})
MERGE
    (r)-[e1:Located_In]->(c)
RETURN
    count(r) as Hotel_Yelp,
    count(distinct c) as City_Yelp,
    count(e1) as In_relationship_1;

// ----------------------------------------------
// Insert restaurant review nodes with Yelp data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///yelp_restaurant_review.csv' AS row
MERGE
    (r:Review {id: row.id})
SET
    r.yelp_id = row.business_id,
    r.text = row.text,
    r.rating = toFloat(row.rating),
    r.time_created = row.time_created,
    r.user_profile_url = row.user_profile_url,
    r.user_image_url = row.user_image_url,
    r.user_name = row.user_name
RETURN
    count(r) as Restaurant_Yelp_Review;

// ----------------------------------------------
// Insert restaurant review nodes with Google data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///google_restaurant_review.csv' AS row
MERGE
    (r:Review {id: row.place_id + row.time})
SET
    r.google_id = row.place_id,
    r.text = row.text,
    r.rating = toFloat(row.rating),
    r.time_created = row.time,
    r.user_profile_url = row.author_url,
    r.user_image_url = row.profile_photo_url,
    r.user_name = row.author_name
RETURN
    count(r) as Restaurant_Google_Review;

// ----------------------------------------------
// Insert neighborhood topics from restaurant reviews
// ----------------------------------------------
CALL apoc.load.json('FILE:///restaurant_review_topics.json')
YIELD value
MERGE
    (t:Topic {id: value.topic + 100})
SET
    t.words = value.words,
    t.type = 'restaurant'
WITH
    value, t
UNWIND
    value.neighborhood AS neighborhood
MATCH
    (n:Neighborhood)
WHERE
    n.name = neighborhood
MERGE
    (n)-[r:Has_Topic]->(t)
RETURN
    count(distinct t) AS Topic, count(r) AS TopicConnection;

// ----------------------------------------------
// Insert attraction review nodes with Yelp data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///yelp_attraction_review.csv' AS row
MERGE
    (r:Review {id: row.id})
SET
    r.yelp_id = row.business_id,
    r.text = row.text,
    r.rating = toFloat(row.rating),
    r.time_created = row.time_created,
    r.user_profile_url = row.user_profile_url,
    r.user_image_url = row.user_image_url,
    r.user_name = row.user_name
RETURN
    count(r) as Attraction_Yelp_Review;

// ----------------------------------------------
// Insert hotel review nodes with Yelp data
// ----------------------------------------------
LOAD CSV WITH HEADERS
FROM 'FILE:///yelp_hotel_review.csv' AS row
MERGE
    (r:Review {id: row.id})
SET
    r.yelp_id = row.business_id,
    r.text = row.text,
    r.rating = toFloat(row.rating),
    r.time_created = row.time_created,
    r.user_profile_url = row.user_profile_url,
    r.user_image_url = row.user_image_url,
    r.user_name = row.user_name
RETURN
    count(r) as Hotel_Yelp_Review;

// ----------------------------------------------
// Create Restaurant->Is_Reviewed->Review relationship
// ----------------------------------------------
MATCH
    (b:Restaurant), (rev:Review)
WHERE
    b.yelp_id = rev.yelp_id
    OR b.google_id = rev.google_id
CREATE
    (b)-[r:Is_Reviewed]->(rev)
RETURN
    count(r) as Restaurant_Review_relationship;

// ----------------------------------------------
// Create Attraction->Is_Reviewed->Review relationship
// ----------------------------------------------
MATCH
    (b:Attraction), (rev:Review)
WHERE
    b.yelp_id = rev.yelp_id
    OR b.google_id = rev.google_id
CREATE
    (b)-[r:Is_Reviewed]->(rev)
RETURN
    count(r) as Attraction_Review_relationship;

// ----------------------------------------------
// Create Hotel->Is_Reviewed->Review relationship
// ----------------------------------------------
MATCH
    (b:Hotel), (rev:Review)
WHERE
    b.yelp_id = rev.yelp_id
    OR b.google_id = rev.google_id
CREATE
    (b)-[r:Is_Reviewed]->(rev)
RETURN
    count(r) as Hotel_Review_relationship;

// ----------------------------------------------
