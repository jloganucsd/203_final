// create uniqueness constraints on node IDs and names
//CREATE CONSTRAINT rental_id ON (n:Rental) ASSERT n.id IS UNIQUE;
//CREATE CONSTRAINT review_id ON (n:Review) ASSERT n.id IS UNIQUE;
//CREATE CONSTRAINT topic_id ON (n:Topic) ASSERT n.id IS UNIQUE;
//CREATE CONSTRAINT city_name ON (n:City) ASSERT n.name IS UNIQUE;
//CREATE CONSTRAINT neighborhood_name ON (n:Neighborhood) ASSERT n.name IS UNIQUE;

// insert Airbnb listings
CALL apoc.load.json('FILE:///airbnb_listings.json')
YIELD value
MERGE (r:Rental {id: value.id})
MERGE (c:City {name: value.city})
MERGE (r)-[:Located_In]->(c)
SET r.type_id = value.property_type_id,
    r.tier_id = value.tier_id,
    r.name = value.name,
    r.bedrooms = value.bedrooms,
    r.bathrooms = value.bathrooms,
    r.bedroom_label = value.bedroom_label,
    r.bathroom_label = value.bathroom_label,
    r.coordinate = point(value.coordinate),
    r.space_type = value.space_type,
    r.amenity_names = value.preview_amenity_names,
    r.amenity_ids = value.amenity_ids,
    r.rate = value.rate
WITH value, r, c
UNWIND value.neighborhood AS neighborhood
MERGE (n:Neighborhood {name: neighborhood})
MERGE (r)-[:Located_In]->(n)
MERGE (n)-[:Located_In]->(c)
RETURN count(r) AS Rental, count(n) AS Neighborhood, count(c) AS City;

// insert Airbnb reviews and connect to listings
CALL apoc.load.json('FILE:///airbnb_reviews.json')
YIELD value
MATCH (a:Rental)
WHERE a.id = value.listing_id
MERGE (b:Review {id: value.id})
MERGE (a)-[r:Is_Reviewed]->(b)
SET b.listing_id = value.listing_id,
    b.author_id = value.author_id,
    b.recipient_id = value.recipient_id,
    b.rating = value.rating,
    b.comments = value.comments,
    b.response = value.response,
    b.created_at = datetime(value.created_at)
RETURN count(b) AS Review;

// insert neighborhood topics from Airbnb reviews
CALL apoc.load.json('FILE:///airbnb_review_topics.json')
YIELD value
MERGE (t:Topic:Rental {id: value.topic})
SET t.words = value.words
WITH value, t
UNWIND value.neighborhood AS neighborhood
MATCH (n:Neighborhood)
WHERE n.name = neighborhood
MERGE (n)-[r:Has_Topic]->(t)
RETURN count(t) AS Topic, count(r) AS TopicConnection;

// connect nearby Airbnb listings
//MATCH (a:Rental), (b:Rental)
//WITH a, b, distance(a.coordinate, b.coordinate) as d
//WHERE d < 1600 AND a.id < b.id
//CREATE (a)-[r:Is_Nearby {distance: d}]->(b)
//RETURN count(r);
